{
  "name": "Publish-blog",
  "nodes": [
    {
      "parameters": {
        "url": "https://aws.amazon.com/blogs/aws/feed/",
        "options": {}
      },
      "id": "d7c145fa-86cf-4005-92fb-cea60874f60a",
      "name": "AWS博客RSS",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        -300,
        -80
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Please review this paragraph  {{ $json[\"content:encoded\"] }} and give a summary in Chinese.\nYour output must be a single-line, compact JSON object with the following fields:\nof the blog in below format:\n{\n    \"title\": \"{{ $json.title }}\",\n\t\"summary\": \"[Chinese summary]\",\n    \"link\": {{ $json.link }}\",\n\t\"Author\": [{{ $json.creator }}],\n    \"Publish date\" : \"{{ $json.pubDate }}\",\n    \"Tag\": [{{ $json.categories }}]\n}\nStrict requirements:\n\nThe summary must be in Chinese.\n1. leave  \"title\": \"{{ $json.title }}\", \"link\": {{ $json.link }}\", \"Author\": [{{ $json.creator }}], \"Publish date\" : \"{{ $json.pubDate }}\", \"Tag\": [{{ $json.categories }}] as they are, you ONLY add SUMMARY field in Chinese.\n2.All double quotes inside field values must be properly escaped (use \\\" for any quote inside a value).\n3.Do not add any fields or text before or after the JSON object.\n4.The JSON must be valid and directly parsable.\nExample output:\njson\n{\n    \"title\": \"Amazon Q Developer elevates the IDE experience with new agentic coding experience\",\n\t\"summary\": \"Amazon Q Developer新的agernt开发能力提升IDE开发体验\",\n    \"link\": \"https://aws.amazon.com/blogs/aws/amazon-q-developer-elevates-the-ide-experience-with-new-agentic-coding-experience/\",\n\t\"Author\": [Elizabeth Fuentes],\n    \"Publish date\": \"Fri, 02 May 2025 16:02:26 +0000\",\n\"Tag\": [\"Amazon FSx\", \"Amazon Simple Storage Service(S3)\",\"Announcements\", \"Featured\", \"Launch\", \"News\", \"Storage\"]\n}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a helpful assistant adept at summary AWS Blogs"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        520,
        200
      ],
      "id": "fd74d6dd-7595-4965-8ffc-07af2af8129d",
      "name": "AI Agent",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"summary\": \"California\",\n\t\"Author\": [\"Andy Jassy\", \"Yunzhang Wang\"],\n    \"Publish date\" : \"05-03-2025\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        700,
        460
      ],
      "id": "5dbe8530-c218-4fdb-9971-b1a1920b9a43",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": "anthropic.claude-3-5-sonnet-20241022-v2:0",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAwsBedrock",
      "typeVersion": 1,
      "position": [
        520,
        440
      ],
      "id": "318e1b1e-0ba7-4a4c-83f1-60e3920d9b93",
      "name": "BR Claude 3.5 V2",
      "credentials": {
        "aws": {
          "id": "n8YqdB3Oen3tpxH2",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1
              ],
              "triggerAtHour": 11,
              "triggerAtMinute": 29
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -500,
        -80
      ],
      "id": "40c3a828-dad7-4476-b716-0913fd28f3bb",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        240,
        180
      ],
      "id": "2d8bd07f-acab-4115-9773-fac791da1c60",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1500,
        200
      ],
      "id": "451a0e53-2336-4741-b88a-769530793cfb",
      "name": "Wait",
      "webhookId": "afff01d0-4cd7-49b6-883e-44071121a97f"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9fa73ce6-5a0e-441f-ac05-e2e70152c81a",
              "leftValue": "={{ $json.categories }}",
              "rightValue": "Featured",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            },
            {
              "id": "28458597-c2a3-4b80-a400-ddfc061e07e8",
              "leftValue": "={{ $json.categories }}",
              "rightValue": "Launch",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            },
            {
              "id": "fc785a51-f424-4dd3-96fe-b41bf77b709c",
              "leftValue": "={{ $json.categories }}",
              "rightValue": "Week in Review",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        60,
        -80
      ],
      "id": "94542f51-4bd0-4ec2-9dbd-8fc443913462",
      "name": "关键字过滤"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://api.github.com/repos/aws-yz/aws-yz.github.io/contents/{{$json.filePath}}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/vnd.github+json"
            },
            {
              "name": "User-Agent",
              "value": "n8n-aws-blog-publisher"
            },
            {
              "name": "X-GitHub-Api-Version",
              "value": "2022-11-28"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "={{$json.commitMessage}}"
            },
            {
              "name": "content",
              "value": "={{ $json.content.base64Encode() }}"
            },
            {
              "name": "branch",
              "value": "main"
            },
            {
              "name": "committer",
              "value": "={{ { \"name\": \"n8n bot\", \"email\": \"wangyz180@gmail.com\" } }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {}
          },
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1060,
        200
      ],
      "id": "4472f3a4-9326-4ecc-9336-82e932af3706",
      "name": "githubAPI",
      "retryOnFail": true,
      "alwaysOutputData": true,
      "credentials": {
        "githubApi": {
          "id": "QX3HCT229pUyaCDm",
          "name": "GitHub account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// 简化版汇总统计节点代码\nconst results = $input.all();\n\nconsole.log('=== AWS Blog Publishing Summary (Simplified) ===');\nconsole.log(`处理 ${results.length} 个项目`);\n\nlet published = 0;\nlet skipped = 0;\nlet errors = 0;\n\nconst publishedArticles = [];\nconst failedArticles = [];\n\nresults.forEach((result, index) => {\n  const data = result.json;\n  const status = data.status;\n\n  if (status === 'published') {\n    published++;\n    publishedArticles.push({\n      fileName: data.fileName || 'unknown',\n      title: data.title || 'Unknown Title',\n      emoji: data.emoji || '☁️',\n      commitSha: data.commitSha || 'unknown',\n      githubUrl: data.githubFileUrl || '',\n      timestamp: data.timestamp || new Date().toISOString()\n    });\n  } else if (status === 'skipped') {\n    skipped++;\n    failedArticles.push({\n      status: 'skipped',\n      fileName: data.fileName || 'unknown',\n      error: data.error || 'skipped'\n    });\n  } else if (status === 'error') {\n    errors++;\n    failedArticles.push({\n      status: 'error',\n      fileName: data.fileName || 'unknown',\n      error: data.error || 'unknown error'\n    });\n  }\n});\n\nconst summary = {\n  total: results.length,\n  published: published,\n  skipped: skipped,\n  errors: errors,\n  success_rate: results.length > 0 ?\n    ((published / results.length) * 100).toFixed(1) + '%' : '0%',\n  timestamp: new Date().toISOString(),\n  published_articles: publishedArticles,\n  failed_articles: failedArticles\n};\n\nlet message = '';\nif (errors > 0) {\n  message = `❌ ${errors} 篇处理失败`;\n  if (published > 0) {\n    message += `，${published} 篇成功发布`;\n  }\n} else if (published > 0) {\n  message = `✅ 成功发布 ${published} 篇 AWS 博客摘要`;\n} else {\n  message = `ℹ️ 本次运行无新文章发布`;\n}\n\nif (skipped > 0) {\n  message += `，跳过 ${skipped} 篇`;\n}\n\nconsole.log(`总处理: ${summary.total} 个项目`);\nconsole.log(`成功发布: ${published} 个`);\nconsole.log(`跳过: ${skipped} 个`);\nconsole.log(`错误: ${errors} 个`);\nconsole.log(`成功率: ${summary.success_rate}`);\n\nreturn {\n  ...summary,\n  message: message,\n  blog_url: 'https://blog.ifyz.wang'\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        -80
      ],
      "id": "6743cad5-bbd2-4d77-94bf-4031aa6fc2b5",
      "name": "汇总统计"
    },
    {
      "parameters": {
        "jsCode": "const summary = $json;\n\nif (summary.published > 0) {\n  return {\n    message: `✅ 成功发布 ${summary.published} 篇 AWS 博客摘要`,\n    details: `总计: ${summary.total}, 发布: ${summary.published}, 跳过: ${summary.skipped}, 错误: ${summary.errors}`,\n    url: 'https://blog.ifyz.wang'\n  };\n}\n\nreturn {\n  message: `ℹ️ 本次运行无新文章发布`,\n  details: `总计: ${summary.total}, 跳过: ${summary.skipped}, 错误: ${summary.errors}`\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        -80
      ],
      "id": "d6942b29-0ddc-49ca-889c-ed6a722b719c",
      "name": "通知"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "168cf004-f610-4228-a0cf-8796623e8066",
              "leftValue": "={{ $json.isoDate }}",
              "rightValue": "={{ DateTime.now().setZone('UTC').set({weekday: 1}).minus({days: 7}).startOf('day').toISO() }}\n",
              "operator": {
                "type": "dateTime",
                "operation": "afterOrEquals"
              }
            },
            {
              "id": "969d9af5-9fe2-472f-b3dc-839d3a9b43a5",
              "leftValue": "={{ $json.pubDate }}",
              "rightValue": "={{ DateTime.now().setZone('UTC').set({weekday: 1}).minus({days: 7}).plus({days: 6}).endOf('day').toISO() }}\n",
              "operator": {
                "type": "dateTime",
                "operation": "beforeOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -120,
        -80
      ],
      "id": "e1c6dedf-d6a2-4251-8cf5-e99fcbd771c5",
      "name": "上周一到周日"
    },
    {
      "parameters": {
        "jsCode": "// 简化版转换节点代码 - 移除图片功能\nconst item = $json.output;\n\n// 基本格式验证\nif (!item || !item.title || !item.summary || !item.link) {\n  throw new Error('Missing required fields: title, summary, or link');\n}\n\n// 检查内容质量\nif (item.summary.length < 50) {\n  throw new Error('Summary too short (minimum 50 characters)');\n}\n\n// 生成文件名友好的 slug\nfunction createSlug(title) {\n  return title\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s-]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-')\n    .trim('-')\n    .substring(0, 50);\n}\n\n// 处理日期\nconst publishDate = new Date(item[\"Publish date\"]);\nconst dateStr = publishDate.toISOString().split('T')[0];\nconst isoDateTime = publishDate.toISOString().replace('Z', '+00:00');\n\n// 生成文件名\nconst slug = createSlug(item.title);\nconst fileName = `${dateStr}-aws-blog-${slug}.md`;\n\n// 处理分类和标签\nfunction generateCategories(tags) {\n  const categoryMap = {\n    'storage': ['s3', 'simple storage service', 'fsx', 'efs', 'storage'],\n    'compute': ['lambda', 'ec2', 'fargate', 'batch', 'graviton'],\n    'database': ['rds', 'dynamodb', 'elasticache', 'redshift'],\n    'ai-ml': ['generative ai', 'machine learning', 'bedrock', 'sagemaker'],\n    'networking': ['vpc', 'cloudfront', 'route 53', 'load balancer'],\n    'developer-tools': ['codecommit', 'codebuild', 'codepipeline', 'open source'],\n    'security': ['guardduty', 'shield', 'security hub', 'certificate manager', 'backup'],\n    'news': ['announcements', 'launch', 'news', 'week in review']\n  };\n\n  const detectedCategories = new Set(['aws']);\n\n  tags.forEach(tag => {\n    const tagLower = tag.toLowerCase();\n    Object.entries(categoryMap).forEach(([category, keywords]) => {\n      if (keywords.some(keyword => tagLower.includes(keyword))) {\n        detectedCategories.add(category);\n      }\n    });\n  });\n\n  return Array.from(detectedCategories).slice(0, 4);\n}\n\nfunction cleanTags(tags) {\n  return tags.map(tag => {\n    return tag\n      .replace(/[^\\w\\s()-]/g, '')\n      .replace(/\\s+/g, ' ')\n      .trim();\n  }).filter(tag => tag.length > 0);\n}\n\nconst categories = generateCategories(item.Tag || []);\nconst tags = cleanTags(item.Tag || []);\n\n// 🎯 选择合适的emoji\nfunction getEmojiForCategory(categories) {\n  const emojiMap = {\n    'storage': '💾',\n    'compute': '⚡',\n    'database': '🗄️',\n    'ai-ml': '🤖',\n    'networking': '🌐',\n    'security': '🛡️',\n    'developer-tools': '🔧',\n    'news': '📰'\n  };\n\n  // 选择第一个非aws分类的emoji\n  const primaryCategory = categories.find(cat => cat !== 'aws');\n  return emojiMap[primaryCategory] || '☁️';\n}\n\nconst emoji = getEmojiForCategory(categories);\n\n// 🎨 使用简化模板生成内容\nconst enhancedContent = `# ${emoji} ${item.title}\n\n> **原文链接**: [${item.title}](${item.link})\n> **作者**: ${(item.Author || []).join(', ')}\n> **发布日期**: ${publishDate.toISOString().replace('T', ' ').replace('.000Z', ' UTC')}\n\n## 📋 内容摘要\n\n${item.summary}\n\n## 🔗 相关信息\n\n这是来自 AWS 官方博客的最新资讯摘要。点击上方原文链接查看完整内容和技术细节。\n\n### 🏷️ 涉及的 AWS 服务和主题\n\n${(item.Tag || []).map(tag => `- **${tag}**`).join('\\n')}\n\n## 📚 延伸阅读\n\n- [AWS 官方文档](https://docs.aws.amazon.com/)\n- [AWS 架构中心](https://aws.amazon.com/architecture/)\n- [AWS 最佳实践](https://aws.amazon.com/architecture/well-architected/)\n\n---\n\n*本文为 AWS 官方博客内容摘要，完整内容请访问原文链接。版权归原作者所有。*`;\n\n// 生成完整的 Markdown 文件（简化版）\nconst frontMatter = `---\nlayout: post\ntitle: \"${item.title}\"\ndate: ${isoDateTime}\ncategories: [${categories.join(', ')}]\ntags: [${tags.join(', ')}]\ntoc: true\nmath: false\nauthor: \"AWS Blog 摘要\"\noriginal_author: \"${(item.Author || []).join(', ')}\"\noriginal_link: \"${item.link}\"\n---\n\n${enhancedContent}`;\n\nreturn {\n  fileName: fileName,\n  filePath: `_posts/${fileName}`,\n  content: frontMatter,\n  commitMessage: `Add AWS blog summary: ${item.title}`,\n  title: item.title,\n  originalLink: item.link,\n  publishDate: dateStr,\n  categories: categories,\n  tags: tags,\n  contentValid: true,\n  emoji: emoji\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        200
      ],
      "id": "ec54341e-4290-4b27-9b1f-723637bbacc0",
      "name": "转换成github API需要的参数"
    },
    {
      "parameters": {
        "jsCode": "// 修复版 n8n-enhanced-result 节点代码\nconst input = $json;\n\n// 检查是否是GitHub API的成功响应\nif (input.content && input.commit) {\n  // 这是GitHub API的成功响应\n  return {\n    status: 'published',\n\n    // 文件信息\n    fileName: input.content.name || 'unknown',\n    filePath: input.content.path || '',\n    fileSize: input.content.size || 0,\n    commitSha: input.commit.sha ? input.commit.sha.substring(0, 8) : 'unknown',\n    commitMessage: input.commit.message || '',\n    githubFileUrl: input.content.html_url || '',\n    githubCommitUrl: input.commit.html_url || '',\n\n    // 统计信息\n    filesCommitted: 1,\n    articleSuccess: true,\n\n    // 从commit message中提取标题（如果可能）\n    title: input.commit.message ?\n      input.commit.message.replace('Add AWS blog summary: ', '') : 'Unknown Title',\n\n    // 基本信息\n    blogUrl: 'https://blog.ifyz.wang',\n    timestamp: input.commit.author?.date || new Date().toISOString(),\n\n    // 成功标识\n    success: true,\n    extractedTitle: input.commit.message ?\n      input.commit.message.replace('Add AWS blog summary: ', '') : 'Unknown Title'\n  };\n}\n\n// 检查是否是错误响应\nif (input.error || input.message) {\n  return {\n    status: 'error',\n    error: input.error || input.message || 'GitHub API error',\n    fileName: 'unknown',\n    title: 'Unknown',\n    timestamp: new Date().toISOString(),\n    filesCommitted: 0,\n    articleSuccess: false\n  };\n}\n\n// 检查是否有明确的status字段（保持向后兼容）\nif (input.status) {\n  if (input.status === 'published') {\n    return {\n      status: 'published',\n      fileName: input.fileName || 'unknown',\n      filePath: input.filePath || '',\n      fileSize: input.fileSize || 0,\n      commitSha: input.commitSha || 'unknown',\n      commitMessage: input.commitMessage || '',\n      githubFileUrl: input.githubFileUrl || '',\n      githubCommitUrl: input.githubCommitUrl || '',\n      filesCommitted: input.filesCommitted || 1,\n      articleSuccess: input.articleSuccess || true,\n      title: input.title || 'Unknown Title',\n      categories: input.categories || [],\n      tags: input.tags || [],\n      emoji: input.emoji || '☁️',\n      timestamp: input.timestamp || new Date().toISOString(),\n      success: true\n    };\n  }\n\n  if (input.status === 'error') {\n    return {\n      status: 'error',\n      error: input.error || 'Unknown error',\n      fileName: input.fileName || 'unknown',\n      title: input.title || 'Unknown',\n      timestamp: input.timestamp || new Date().toISOString(),\n      filesCommitted: 0,\n      articleSuccess: false\n    };\n  }\n}\n\n// 如果都不匹配，返回未知状态（这种情况不应该发生）\nconsole.log('Unexpected input format:', JSON.stringify(input, null, 2));\nreturn {\n  status: 'unknown',\n  error: 'Unexpected response format from GitHub API',\n  timestamp: new Date().toISOString(),\n  filesCommitted: 0,\n  articleSuccess: false,\n  debug_input: input\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        200
      ],
      "id": "38d7d9c8-e3b4-4cef-8ec7-4c6b4c3930fa",
      "name": "n8n-enhanced-result"
    }
  ],
  "pinData": {},
  "connections": {
    "AWS博客RSS": {
      "main": [
        [
          {
            "node": "上周一到周日",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "转换成github API需要的参数",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "BR Claude 3.5 V2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "AWS博客RSS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "汇总统计",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "关键字过滤": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "githubAPI": {
      "main": [
        [
          {
            "node": "n8n-enhanced-result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "汇总统计": {
      "main": [
        [
          {
            "node": "通知",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "上周一到周日": {
      "main": [
        [
          {
            "node": "关键字过滤",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "转换成github API需要的参数": {
      "main": [
        [
          {
            "node": "githubAPI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "n8n-enhanced-result": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "2a8f0092-32bb-4214-a353-c443f1e090cf",
  "meta": {
    "instanceId": "1695578057efcaddd552e4313ab52e3553fb9edb5139398210a9506c188cb8a6"
  },
  "id": "88IXZJwnPWJ7DtGF",
  "tags": []
}